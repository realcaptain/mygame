from random import *

import pygame

# SET LEVEL
def setup(level):
    global display_time
    # HOW LONG TO DISPLAY THE NUMBER
    display_time = 5 - (level // 3)
    display_time = max(display_time, 1)


    # HOW MANY NUMBERS TO DISPLAY
    number_count = (level // 3) + 5
    number_count = min(number_count, 20) # MAX LEVEL IS 20

    # DISPLAY GRID SCREEN
    shuffle_grid(number_count)


# SHUFFLE THE NUMBER

def shuffle_grid(number_count):
    rows = 5
    columns = 9

    cell_size = 130
    button_size = 110
    screen_left_margin = 55
    screen_top_margin = 20


    # EXAMPLE [0, 0, 0, 0, 0, 0, 0, 0, 0]
    grid = [[0 for col in range(columns)] for row in range(rows)] # 5 x 9

    number = 1 # START NUMBER FROM 1
    while number <= number_count:
        row_idx = randrange(0, rows)  # 0, 1, 2, 3, 4 randome shuffle
        col_idx = randrange(0, columns) # 0 ~ 8 random shuffle

        if grid[row_idx][col_idx] == 0:
            grid[row_idx][col_idx] = number # specify the number
            number += 1

            # get x, y values based on the current location of grid cell
            center_x = screen_left_margin + (col_idx * cell_size) + (cell_size / 2)
            center_y = screen_top_margin + (row_idx * cell_size) + (cell_size / 2)

            # draw button
            button = pygame.Rect(0, 0, button_size, button_size)
            button.center = (center_x, center_y)

            number_buttons.append(button)


    print(grid)

# SHOW START DISPLAY
def display_start_screen():
    pygame.draw.circle(screen, WHITE, start_button.center, 60, 5)
    # Draw circle in white, center location follows start_button
    # radius is 60, line is 5
    msg = game_font.render(f"{curr_level}", True, WHITE)
    msg_rect = msg.get_rect(center=start_button.center)
    screen.blit(msg, msg_rect)


# DISPLAY GAME SCREEN
def display_game_screen():
    global hidden
    if not hidden:
        elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000 # ms -> sec
        if elapsed_time > display_time:
            hidden = True

    for idx, rect in enumerate(number_buttons, start=1):
        if hidden: 
            pygame.draw.rect(screen, WHITE, rect)
        else:
            cell_text = game_font.render(str(idx), True, WHITE)
            text_rect = cell_text.get_rect(center=rect.center)
            screen.blit(cell_text, text_rect)

    
# CHECK BUTTON POSITION
def check_buttons(pos):
    global start, start_ticks, curr_level
    if start:
        check_number_buttons(pos)
    elif start_button.collidepoint(pos):
        start = True
        start_ticks = pygame.time.get_ticks() # timer starts

def check_number_buttons(pos):
    global start, hidden, curr_level
    for button in number_buttons:
        if button.collidepoint(pos):
            if button == number_buttons[0]:
                print("Correct")
                del number_buttons[0]
                if not hidden:
                    hidden = True
            else: 
                game_over()

            break

    if len(number_buttons) == 0:
        start = False
        hidden = False
        curr_level += 1
        setup(curr_level)

# GAME OVER CALCULATE AND DISPLAY LEVEL

def game_over():
    global running
    running = False

    msg = game_font.render(f"Your level is {curr_level}", True, WHITE)
    msg_rect = msg.get_rect(center=(screen_width/2, screen_height/2))
    screen.fill(BLACK)
    screen.blit(msg, msg_rect)




# INITIALIZE
pygame.init()
screen_width = 1280
screen_height = 720
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Memory game")
game_font = pygame.font.Font(None, 120) # Specify font



# START BUTTON
start_button = pygame.Rect(0, 0, 120, 120)
start_button.center = (120, screen_height - 120)

# COLOR
BLACK = (0, 0, 0) # RGB
WHITE = (255, 255, 255)
GRAY = (50, 50, 50)

number_buttons = [] # BUTTON THAT PLAYER NEEDS TO CLICK
curr_level = 1
display_time = None # time for displaying the numbers

start_ticks = None # Calculate the time


# CHECK WHETER THE GAME IS STARTED
start = False

# HIDE NUMBERS
hidden = False

# BEFORE GAME START, SET GAME 
setup(curr_level)

# LOOP STATEMENT
running = True # Is the game in running?
while running:
    click_pos = None

    # EVENT LOOP
    for event in pygame.event.get(): # what event occurred?
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONUP:
            click_pos = pygame.mouse.get_pos()
            print(click_pos)

    # BLANK SCREEN
    screen.fill(BLACK)

    if start: 
        display_game_screen() # GAME DISPLAY 
    else:
        display_start_screen() # START DISPLAY 

    if click_pos:
            check_buttons(click_pos)

    # DISPLAY UPDATE
    pygame.display.update()

# DISPLAY 3 SECONDS BEFORE QUITTING
pygame.time.delay(3000)

# EXIT GAME
pygame.quit()

